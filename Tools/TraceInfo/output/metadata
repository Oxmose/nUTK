/* CTF 1.8 */
trace {
    major = 1;
    minor = 8;

    byte_order = le;

    packet.header := struct {
        integer {
            size = 32;
        } utk_magic;
        integer {
            size = 32;
        } trace_version;
    };
};

clock {
    name = sys_clock;
    freq = 3000000000;
    offset_s = 0;
};

/*******************************************************************************
 * Types definition
 ******************************************************************************/

typealias integer {
    size = 32;
} := uint32_t;

typealias integer {
    base = hex;
    size = 32;
} := xuint32_t;

typealias integer {
    size = 64;
} := uint64_t;

typealias integer {
    base = hex;
    size = 64;
} := xuint64_t;

/*******************************************************************************
 * Stream definition
 ******************************************************************************/

stream {
    event.header := struct {
        uint32_t id;
        uint64_t timestamp;
    };
};

/*******************************************************************************
 * Events definition
 ******************************************************************************/
event {
    id = 1;
    name = "Kernel Kickstart Start";
};

event {
    id = 2;
    name = "Kernel Kickstart End";
};

event {
    id = 3;
    name = "VGA Init Start";
};

event {
    id = 4;
    name = "VGA Init End";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
        uint32_t buff_len;
    };
};

event {
    id = 5;
    name = "CPU Setup GDT Start";
};

event {
    id = 6;
    name = "CPU Setup GDT End";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 7;
    name = "CPU Setup IDT Start";
};

event {
    id = 8;
    name = "CPU Setup IDT End";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 9;
    name = "CPU Setup TSS Start";
};

event {
    id = 10;
    name = "CPU Setup TSS End";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 11;
    name = "CPU Setup Start";
};

event {
    id = 12;
    name = "CPU Setup End";
};

event {
    id = 13;
    name = "CPU Raise Interrupt Start";
    fields := struct {
        uint32_t int_idx;
    };
};

event {
    id = 14;
    name = "CPU Raise Interrupt End";
    fields := struct {
        uint32_t int_idx;
        uint32_t ret_code;
    };
};

event {
    id = 15;
    name = "Kernel Panic Request";
    fields := struct {
        uint32_t code;
    };
};

event {
    id = 16;
    name = "Kernel Panic Handler Start";
    fields := struct {
        uint32_t error_code;
    };
};

event {
    id = 17;
    name = "Kernel Panic Handler End";
    fields := struct {
        uint32_t error_code;
    };
};

event {
    id = 18;
    name = "Disable Interrupts";
};

event {
    id = 19;
    name = "Enable Interrupts";
};

event {
    id = 20;
    name = "Halt System";
};

event {
    id = 21;
    name = "Kernel General Interrupt Handler Start";
    fields := struct {
        uint32_t int_idx;
        uint32_t thread_id;
    };
};

event {
    id = 22;
    name = "Kernel General Interrupt Handler End";
    fields := struct {
        uint32_t int_idx;
        uint32_t thread_id;
    };
};

event {
    id = 23;
    name = "Kernel Interrupt Init Start";
};

event {
    id = 24;
    name = "Kernel Interrupt Init End";
    fields := struct {
        uint32_t code;
    };
};

event {
    id = 25;
    name = "Kernel Interrupt Set Driver Start";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 26;
    name = "Kernel Interrupt Set Driver End";
    fields := struct {
        uint32_t ret_code;
    };
};

event {
    id = 27;
    name = "Kernel Interrupt Register Interrupt Start";
    fields := struct {
        uint32_t int_idx;
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 28;
    name = "Kernel Interrupt Register Interrupt End";
    fields := struct {
        uint32_t int_idx;
        uint32_t ret_code;
    };
};

event {
    id = 29;
    name = "Kernel Interrupt Remove Interrupt Start";
    fields := struct {
        uint32_t int_idx;
    };
};

event {
    id = 30;
    name = "Kernel Interrupt Remove Interrupt End";
    fields := struct {
        uint32_t int_idx;
        uint32_t ret_code;
    };
};

event {
    id = 31;
    name = "Kernel Interrupt Register IRQ Start";
    fields := struct {
        uint32_t irq_idx;
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 32;
    name = "Kernel Interrupt Register IRQ End";
    fields := struct {
        uint32_t irq_idx;
        uint32_t ret_code;
    };
};

event {
    id = 33;
    name = "Kernel Interrupt Remove IRQ Start";
    fields := struct {
        uint32_t irq_idx;
    };
};

event {
    id = 34;
    name = "Kernel Interrupt Remove IRQ End";
    fields := struct {
        uint32_t irq_idx;
        uint32_t ret_code;
    };
};

event {
    id = 35;
    name = "Kernel Interrupt Restore Interrupt";
    fields := struct {
        uint32_t prev_state;
    };
};

event {
    id = 36;
    name = "Kernel Interrupt Disable Interrupt";
    fields := struct {
        uint32_t prev_state;
    };
};

event {
    id = 37;
    name = "Kernel Interrupt Set IRQ Mask";
    fields := struct {
        uint32_t irq_idx;
        uint32_t enabled;
    };
};

event {
    id = 38;
    name = "Kernel Interrupt Set IRQ EOI";
    fields := struct {
        uint32_t irq_idx;
    };
};

event {
    id = 39;
    name = "Kernel Set Console Driver Start";
    fields := struct {
        xuint32_t addr_low;
        xuint32_t addr_high;
    };
};

event {
    id = 40;
    name = "Kernel Set Console Driver End";
    fields := struct {
        uint32_t ret_code;
    };
};

event {
    id = 41;
    name = "Kernel UART Driver Init Start";
};

event {
    id = 42;
    name = "Kernel UART Driver Init End";
};


